%{

#include "../parser/error_reporter.hpp"
#include "../parser/ast.hpp"

#include <iostream>
#include <fstream>
#include <cassert>
#include <algorithm>

#include <string>
#include <cstring>
#include <string.h>

#include <vector>
#include <sstream>
#include <set>

using namespace std;

extern int yylex(void);
void yyerror(const char*);

extern int line_num; 
extern string line, prev_line; 

int cur_position_in_line = 0;
extern ast* ast_;

error_reporter reporter;

%}

%union {
    program *program_;
    sub_def *sub_def_;
    statement *statement_;
    expr *expr_;
    opt_ext_params *opt_ext_params_;
    ext_params_seq *ext_params_seq_;
    code_df_param *code_df_param_;
    block *block_;
    opt_dfdecls *opt_dfdecls_;
    dfdecls *dfdecls_;
    name_seq *name_seq_;
    statement_seq *statement_seq_;
    control_pragma *control_pragma_;
    let_statement *let_statement_;
    cf_statement *cf_statement_;
    while_statement *while_statement_;
    for_statement *for_statement_;
    if_statement *if_statement_;
    opt_behavior *opt_behavior_;
    behv_pragma *behv_pragma_;
    id_seq *id_seq_;
    assign_seq *assign_seq_;
    assign *assign_;
    opt_label *opt_label_;
    id *id_;
    opt_exprs *opt_exprs_;
    exprs_seq *exprs_seq_;
    opt_setdf_rules *opt_setdf_rules_;
    opt_rules *opt_rules_;
    sum *sum_;
    sub *sub_;
    mul *mul_;
    div1 *div_;
    lt *lt_;
    mod *mod_;
    gt *gt_;
    leq *leq_;
    geq *geq_;
    dbleq *dbleq_;
    neq *neq_;
    dblamp *dblamp_;
    dblpipe *dblpipe_;
    param_seq *param_seq_;
    param *param_;
    opt_params* opt_params_;
    behv_pragmas_seq *behv_pragmas_seq_;
    integer* int_;
    real* double_;
    luna_string* string_;
};

%token<string_> STRING 
%token<string_> NAME
%token<int_> INT;
%token<double_> REAL;

%token<string_> SCOLON COMMA COLON DOT SHARP ARROW LARROW LARR RARR AMP // mb char
%token<string_> KW_CF KW_DF KW_IMPORT KW_AS KW_FOR KW_IF KW_LET KW_VALUE KW_CUDA KW_NOCPU
%token<string_> KW_IN KW_OUT KW_SIZE KW_SUB KW_WHILE KW_INT KW_NAME KW_REAL KW_STRING KW_RUSH KW_STATIC KW_STATIC_FOR KW_UNROLLING KW_BLOCK KW_CPP INTERPRETER
%token<string_> EQ LB RB LT GT LSB RSB DIAP QMARK DBLEQ NEQ LEQ EQG GEQ AT
%token<string_> PLUS MINUS MUL DIV MOD TAB WS SWS LN BUCK
%token<string_> PIPE ASSIGN LCB RCB IDX DBLPIPE DBLAMP

%type<program_> program;
%type<sub_def_> sub_def;
%type<statement_> statement;
%type<expr_> expr;

%type<opt_ext_params_> opt_ext_params;
%type<ext_params_seq_> ext_params_seq;
%type<code_df_param_> code_df_param;

%type<block_> block;
%type<opt_dfdecls_> opt_dfdecls;
%type<dfdecls_> dfdecls;
%type<name_seq_> name_seq;
%type<statement_seq_> statement_seq;
%type<control_pragma_> control_pragma;
%type<cf_statement_> cf_statement;
%type<let_statement_> let_statement;
%type<for_statement_> for_statement;
%type<while_statement_> while_statement;
%type<if_statement_> if_statement;
%type<opt_behavior_> opt_behavior;
%type<behv_pragma_> behv_pragma;
%type<opt_params_> opt_params;
%type<id_seq_> id_seq;
%type<assign_seq_> assign_seq;
%type<assign_> assign;
%type<opt_label_> opt_label;
%type<id_> id;
%type<opt_exprs_> opt_exprs;
%type<exprs_seq_> exprs_seq;
%type<opt_setdf_rules_> opt_setdf_rules;
%type<opt_rules_> opt_rules;
%type<behv_pragmas_seq_> behv_pragmas_seq;

%type<string_> code_id;
%type<string_> where_type;
%type<string_> type;
%type<string_> code_df;


%type<param_seq_> params_seq;
%type<param_> param; 

%nonassoc IFX
%nonassoc KW_ELSE

%left QMARK
%left COLON
%left DBLPIPE
%left DBLAMP
%left LEQ GEQ DBLEQ NEQ GT LT
%left PLUS MINUS
%left MUL DIV MOD

%%

all: 
	program { 
        ast_->set_program($1);
    }
    | {}

program:    
    sub_def {
        $$ = new program();
        $$->sub_defs->push_back($1);
        $$->set_position(@1.first_line);
    }
	
    | program sub_def { 
        $1->sub_defs->push_back($2);
        $$->set_position(@1.first_line);
    };

sub_def:
    // sub main() {}
	KW_SUB control_pragma code_id opt_params block {
        $$ = new luna_sub_def($2, $3, $4, $5);
        $$->set_position(@1.first_line);
    }

    // C++ sub codeid opt_params __block (int)
	| KW_CPP KW_SUB code_id opt_params KW_BLOCK LB INT RB {
        $$ = new cxx_block_with_params_def($3, $4);
        $$->set_position(@1.first_line);
    }

    // import init(params) as init;
	| KW_IMPORT code_id LB opt_ext_params RB KW_AS code_id SCOLON {
        $$ = new import($2, $4, $7, std::string(""));
        $$->set_position(@1.first_line);
    }

	| KW_IMPORT error SCOLON {
        delete $$;
        $$ = nullptr;
    }

    | error SCOLON {
        delete $$;
        $$ = nullptr;
    }

    // import init(params) as init : CUDA;
    | KW_IMPORT code_id LB opt_ext_params RB KW_AS code_id COLON KW_CUDA SCOLON {
        $$ = new import($2, $4, $7, std::string("CUDA"));
        $$->set_position(@1.first_line);
    }
    
    // import init(params) as init : CUDA , NOCPU;
    | KW_IMPORT code_id LB opt_ext_params RB KW_AS code_id COLON KW_CUDA COMMA KW_NOCPU SCOLON {
        $$ = new import($2, $4, $7, std::string("CUDA, NOCPU"));
        $$->set_position(@1.first_line);
    }

    // C++ main __block (int)
	| KW_CPP NAME KW_BLOCK LB INT RB {
        $$ = new cxx_block_def($2);
        $$->set_position(@1.first_line);
    }
;

opt_ext_params:
    ext_params_seq { 
        $$ = new opt_ext_params($1);
        $$->set_position(@1.first_line);
    }
	| { $$ = new opt_ext_params(nullptr); }

ext_params_seq:
	code_df_param  { 
        $$ = new ext_params_seq();
        $$->params_->push_back($1);
        $$->set_position(@1.first_line);
    }

	| ext_params_seq COMMA code_df_param {
        $1->params_->push_back($3);
        $$->set_position(@1.first_line);
    }
	; 

code_df_param:
    type code_df {
        $$ = new code_df_param($1, $2);
        $$->set_position(@1.first_line);
    }
;

code_df:
	NAME { $$ = $1; }
	| { $$ = nullptr; }
	;

type:
	KW_INT { $$ = $1;}
	| KW_REAL { $$ = $1; } 
	| KW_STRING  { $$ = $1; } 
	| KW_NAME { $$ = $1; } 
	| KW_VALUE AMP { $$ = $1; } 
	| KW_VALUE { $$ = $1; }
	;

block:
    statement { 
        $$ = new block();
        $$->statement_seq_->statements_->push_back($1); 
        $$->set_position(@1.first_line);
    }

	| LCB opt_dfdecls statement_seq RCB opt_behavior { 
        $$ = new block($2, $3, $5); 
        $$->set_position(@1.first_line);
    }
	;

opt_dfdecls:
	dfdecls { 
        $$ = new opt_dfdecls($1); 
        $$->set_position(@1.first_line);
    }

	| { $$ = new opt_dfdecls(nullptr); }
	;

dfdecls:
	KW_DF name_seq SCOLON { 
        $$ = new dfdecls($2); 
        $$->set_position(@1.first_line);
    }
	;

name_seq:
	NAME { 
        $$ = new name_seq();
        $$->names_->push_back($1); 
        $1->set_position(@1.first_line);
    }
	| name_seq COMMA NAME {
        $1->names_->push_back($3);
        $3->set_position(@3.first_line);
    }
	;

statement_seq:
	statement  { 
        $$ = new statement_seq();
        $$->statements_->push_back($1); 
        $$->set_position(@1.first_line);
    }

	| statement_seq statement {
        if ($1 != nullptr) {
            $1->statements_->push_back($2);
            $$->set_position(@1.first_line);
        }
    }
    ;

control_pragma:
    LARR where_type COMMA expr RARR {
        vector<expr *> exprs;
        exprs.push_back($4);
        $$ = new control_pragma($2, &exprs);
        $$->set_position(@1.first_line);
    }

    | LARR where_type COMMA expr COMMA expr RARR {
        vector<expr *> exprs;
        exprs.push_back($4);
        exprs.push_back($6);
        $$ = new control_pragma($2, &exprs);
        $$->set_position(@1.first_line);

    }
    | LARR where_type RARR{
        $$ = new control_pragma($2, nullptr);
        $$->set_position(@1.first_line);
    }
    | 
    {
        $$ =  nullptr;
    }
	    
statement:
    cf_statement { $$ = $1;}
    | let_statement { $$ = $1; }
    | for_statement { $$ = $1; }
    | while_statement { $$ = $1; }
    | if_statement { $$ = $1; }

    | error SCOLON {
	    reporter.report(ERROR_LEVEL::ERROR,
            "Unexpected token",
            line,
            @1.first_column,
            "cf, if, let, for, while.");
        delete $$;
        $$ = nullptr;
    } 
    ;

/* cf a : init(); */
cf_statement: opt_label code_id opt_exprs opt_setdf_rules opt_rules opt_behavior SCOLON {
        $$ = new cf_statement($1, $2, $3, $4, $5, $6);

        if ($1->line_ != 0) {
            $$->set_position($1->line_);
        }
        else {
            $$->set_position($2->line_);
        }
    }
	;

opt_behavior:
	AT LCB behv_pragmas_seq RCB {
        $$ = new opt_behavior($3);
    }
	| { $$ = new opt_behavior(nullptr); }
	;

behv_pragmas_seq:
	behv_pragma { 
        $$ = new behv_pragmas_seq();
        $$->behv_pragma_->push_back($1); 
        $$->set_position(@1.first_line);
    }
	| behv_pragmas_seq behv_pragma {
        $1->behv_pragma_->push_back($2);
        $$->set_position(@1.first_line);
    }
	;

behv_pragma:
	NAME id EQ expr SCOLON {
        $$ = new behv_pragma_eq($1, $2, $4);
        $$->set_position(@1.first_line);
    }

	| NAME id EQG expr SCOLON {
        $$ = new behv_pragma_eqg($1, $2, $4);
        $$->set_position(@1.first_line);
    }

	| NAME id_seq SCOLON {
        $$ = new behv_pragma_id_seq($1, $2);
        $$->set_position(@1.first_line);
    }

	| NAME COLON expr SCOLON {
        $$ = new behv_pragma_expr($1, $3);
        $$->set_position(@1.first_line);
    }

	| name_seq SCOLON {
        $$ = new behv_pragma_seq($1);
        $$->set_position(@1.first_line);
    }
	;

id_seq:
	id { 
        $$ = new id_seq();
        $$->seq_->push_back($1); 
        $$->set_position(@1.first_line);
    }
	| id_seq COMMA id {
        $1->seq_->push_back($3);
        $$->set_position(@1.first_line);
    }

let_statement: KW_LET assign_seq block {
    $$ = new let_statement($2, $3);
    $$->set_position(@1.first_line);
}

for_statement: KW_FOR control_pragma NAME EQ expr DIAP expr block {
    $$ = new for_statement($2, $3, $5, $7, $8);
    $$->set_position(@1.first_line);
}

while_statement: KW_WHILE control_pragma expr COMMA NAME EQ expr DIAP KW_OUT id block {
    $$ = new while_statement($2, $3, $5, $7, $10, $11);
    $$->set_position(@1.first_line);
}

if_statement: KW_IF expr block %prec IFX {
    $$ = new if_statement($2, $3);
    $$->set_position(@1.first_line);
}

/*	| KW_IF expr block KW_ELSE block */
	;

assign_seq:
	assign { 
        $$ = new assign_seq();
        $$->assign_seq_->push_back($1);
        $$->set_position(@1.first_line);
    }
	| assign_seq COMMA assign  {
        $1->assign_seq_->push_back($3);
        $$->set_position(@1.first_line);
    }
	;

assign:
	NAME EQ expr { $$ = new assign($1, $3); } 
	;

opt_label:
	KW_CF id COLON { 
        $$ = new opt_label($2); 
        $$->set_position(@1.first_line);
    }
	|   
    {
        $$ = new opt_label(nullptr);
	}
	;

id:
	NAME { 
        $$ = new simple_id($1);
        $$->set_position(@1.first_line);
        $1->set_position(@1.first_line);
    }

	| id LSB expr RSB {
        $$ = new complex_id($1, $3);
        $$->set_position(@1.first_line);
    }
	;

opt_exprs:
	LB exprs_seq RB { 
        $$ = new opt_exprs($2); 
    }
	| LB RB { 
        $$ = new opt_exprs(nullptr); 
        }
	;

exprs_seq:
	expr { 
        $$ = new exprs_seq();
        $$->expr_->push_back($1); 
    }
	| exprs_seq COMMA expr {
        $1->expr_->push_back($3);
    }
	;

opt_setdf_rules:
	RARR opt_exprs { 
        $$ = new opt_setdf_rules($2); 
        // // // std::cerr << "opt_setdf_rules" << std::endl;
        }
    | {
        $$ = new opt_setdf_rules(nullptr); 
    }
	;

opt_rules:
    ARROW opt_exprs { $$ = new opt_rules($2); }
    | {
        $$ = new opt_rules(nullptr);
    }
    ;

code_id:
	NAME { 
        $$ = $1;
        $$->set_position(@1.first_line);
    }
	;

expr:
	INT { 
        $$ = $1; 
        $$->set_position(@1.first_line);
    } 
	| REAL { 
        $$ = $1; 
        $$->set_position(@1.first_line);
    }  
	| STRING { 
        $$ = $1; 
        $$->set_position(@1.first_line);
    } 

    // int(1.0)
	| KW_INT LB expr RB { 
        $$ = new to_int($3); 
        $$->set_position(@1.first_line);
    }     
    // real(1)
	| KW_REAL LB expr RB  {
        $$ = new to_real($3); 
        $$->set_position(@1.first_line);
    } 
    // string()
	| KW_STRING LB expr RB { 
        $$ = new to_str($3); 
        $$->set_position(@1.first_line);
    } 

	| expr PLUS expr { 
        $$ = new sum($1, $3); 
        $$->set_position(@1.first_line);
    } 
	| expr MINUS expr { 
        $$ = new sub($1, $3);
        $$->set_position(@1.first_line);
    } 
	| expr MUL expr { 
        $$ = new mul($1, $3);
        $$->set_position(@1.first_line);
    } 
	| expr DIV expr { 
        $$ = new div1($1, $3); 
        $$->set_position(@1.first_line);
    } 

	| expr MOD expr { 
        $$ = new mod($1, $3);
        $$->set_position(@1.first_line);
    }  
	| expr LT expr { 
        $$ = new lt($1, $3); 
        $$->set_position(@1.first_line);
    } 
	| expr GT expr { 
        $$ = new gt($1, $3); 
        $$->set_position(@1.first_line);
    } 
	| expr LEQ expr { 
        $$ = new leq($1, $3);
        $$->set_position(@1.first_line);
     } 
	| expr GEQ expr { 
        $$ = new geq($1, $3);
        $$->set_position(@1.first_line);
     } 
	| expr DBLEQ expr{ 
        $$ = new dbleq($1, $3); 
        $$->set_position(@1.first_line);
    } 
	| expr NEQ expr { 
        $$ = new neq($1, $3);
        $$->set_position(@1.first_line);
    }

	| expr DBLAMP expr { 
        $$ = new dblamp($1, $3); 
        $$->set_position(@1.first_line);
    } 
	| expr DBLPIPE expr { 
        $$ = new dblpipe($1, $3); 
        $$->set_position(@1.first_line);
    } 
	| LB expr RB { 
        $$ = $2; 
        $$->set_position(@1.first_line);
    }
	| id { 
        $$ = $1; 
        $$->set_position(@1.first_line);
    } 
	| expr QMARK expr COLON expr {
        // todo
    } 
	;

opt_params:
	LB params_seq RB { 
        $$ = new opt_params($2); 
        $$->set_position(@1.first_line);
    }
	| LB RB { 
        $$ = new opt_params(nullptr);
        $$->set_position(@1.first_line);
    }

    | LB error RB {
        reporter.report(ERROR_LEVEL::ERROR,
            "Unexpected token",
            line,
            @1.first_column,
            "int, name, value, real, string");
        delete $$;
        $$ = new opt_params(nullptr);
    }
	;

params_seq:
	param  { 
        $$ = new param_seq();
        $$->params_->push_back($1); 
        $$->set_position(@1.first_line);
    }
	| params_seq COMMA param {
        $1->params_->push_back($3);
    }
	;

param:
	type NAME { 
        $$ = new param($1, $2); 
        $$->set_position(@2.first_line);
        $2->set_position(@2.first_line);
    }
	;

where_type: 
    KW_RUSH { 
        $$ = $1; 
        $$->set_position(@1.first_line);
    }
    | KW_STATIC { 
        $$ = $1; 
        $$->set_position(@1.first_line);
    }
    | KW_STATIC_FOR { 
        $$ = $1; 
        $$->set_position(@1.first_line);
    }
    | KW_UNROLLING{ 
        $$ = $1; 
        $$->set_position(@1.first_line);
    }
    | { $$ = new luna_string(nullptr); }
    ;
%%
